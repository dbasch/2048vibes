{"ast":null,"code":"import React,{useState,useEffect,useCallback}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[board,setBoard]=useState(Array(4).fill().map(()=>Array(4).fill(0)));const[score,setScore]=useState(0);const[gameOver,setGameOver]=useState(false);const[animating,setAnimating]=useState(false);// Color mapping for different numbers\nconst getTileColor=number=>{const colors={0:'bg-gray-300',2:'bg-yellow-100',4:'bg-yellow-200',8:'bg-orange-200',16:'bg-orange-300',32:'bg-red-300',64:'bg-red-400',128:'bg-yellow-300',256:'bg-yellow-400',512:'bg-yellow-500',1024:'bg-yellow-600',2048:'bg-yellow-700'};return colors[number]||'bg-yellow-800';};// Text color mapping for better contrast\nconst getTextColor=number=>{return number<=4?'text-gray-800':'text-white';};// Initialize the game with two random tiles\nuseEffect(()=>{addRandomTile();addRandomTile();},[]);// Add a random tile (2 or 4) to an empty cell\nconst addRandomTile=useCallback(()=>{const emptyCells=[];board.forEach((row,i)=>{row.forEach((cell,j)=>{if(cell===0){emptyCells.push([i,j]);}});});if(emptyCells.length>0){const[i,j]=emptyCells[Math.floor(Math.random()*emptyCells.length)];setBoard(prevBoard=>{const newBoard=prevBoard.map(row=>[...row]);newBoard[i][j]=Math.random()<0.9?2:4;return newBoard;});}},[board]);const moveLeft=useCallback(board=>{let moved=false;const newBoard=board.map(row=>{// Filter out zeros\nlet filteredRow=row.filter(cell=>cell!==0);// Merge adjacent equal numbers\nfor(let i=0;i<filteredRow.length-1;i++){if(filteredRow[i]===filteredRow[i+1]){filteredRow[i]*=2;setScore(prev=>prev+filteredRow[i]);filteredRow.splice(i+1,1);moved=true;}}// Pad with zeros\nwhile(filteredRow.length<4){filteredRow.push(0);}// Check if the row has changed\nif(JSON.stringify(row)!==JSON.stringify(filteredRow)){moved=true;}return filteredRow;});return{newBoard,moved};},[]);const moveRight=useCallback(board=>{let moved=false;const newBoard=board.map(row=>{// Filter out zeros\nlet filteredRow=row.filter(cell=>cell!==0);// Merge adjacent equal numbers\nfor(let i=filteredRow.length-1;i>0;i--){if(filteredRow[i]===filteredRow[i-1]){filteredRow[i]*=2;setScore(prev=>prev+filteredRow[i]);filteredRow.splice(i-1,1);moved=true;}}// Pad with zeros\nwhile(filteredRow.length<4){filteredRow.unshift(0);}// Check if the row has changed\nif(JSON.stringify(row)!==JSON.stringify(filteredRow)){moved=true;}return filteredRow;});return{newBoard,moved};},[]);const moveUp=useCallback(board=>{let moved=false;const newBoard=Array(4).fill().map(()=>Array(4).fill(0));for(let j=0;j<4;j++){// Get column and filter zeros\nlet column=board.map(row=>row[j]).filter(cell=>cell!==0);// Merge adjacent equal numbers\nfor(let i=0;i<column.length-1;i++){if(column[i]===column[i+1]){column[i]*=2;setScore(prev=>prev+column[i]);column.splice(i+1,1);moved=true;}}// Pad with zeros\nwhile(column.length<4){column.push(0);}// Update the new board\nfor(let i=0;i<4;i++){newBoard[i][j]=column[i];}// Check if the column has changed\nconst oldColumn=board.map(row=>row[j]);if(JSON.stringify(oldColumn)!==JSON.stringify(column)){moved=true;}}return{newBoard,moved};},[]);const moveDown=useCallback(board=>{let moved=false;const newBoard=Array(4).fill().map(()=>Array(4).fill(0));for(let j=0;j<4;j++){// Get column and filter zeros\nlet column=board.map(row=>row[j]).filter(cell=>cell!==0);// Merge adjacent equal numbers\nfor(let i=column.length-1;i>0;i--){if(column[i]===column[i-1]){column[i]*=2;setScore(prev=>prev+column[i]);column.splice(i-1,1);moved=true;}}// Pad with zeros\nwhile(column.length<4){column.unshift(0);}// Update the new board\nfor(let i=0;i<4;i++){newBoard[i][j]=column[i];}// Check if the column has changed\nconst oldColumn=board.map(row=>row[j]);if(JSON.stringify(oldColumn)!==JSON.stringify(column)){moved=true;}}return{newBoard,moved};},[]);const checkGameOver=useCallback(()=>{// Check for empty cells\nfor(let i=0;i<4;i++){for(let j=0;j<4;j++){if(board[i][j]===0)return;}}// Check for possible merges\nfor(let i=0;i<4;i++){for(let j=0;j<4;j++){if(i<3&&board[i][j]===board[i+1][j]||j<3&&board[i][j]===board[i][j+1]){return;}}}setGameOver(true);},[board]);// Handle keyboard events\nuseEffect(()=>{const handleKeyDown=event=>{if(gameOver||animating)return;let result;switch(event.key){case'ArrowUp':result=moveUp(board);break;case'ArrowDown':result=moveDown(board);break;case'ArrowLeft':result=moveLeft(board);break;case'ArrowRight':result=moveRight(board);break;default:return;}// Only update board and add new tile if there was an actual move\nif(result.moved){setAnimating(true);setBoard(result.newBoard);// Add new tile after the animation completes\nsetTimeout(()=>{addRandomTile();checkGameOver();setAnimating(false);},150);// Match this with the CSS transition duration\n}};window.addEventListener('keydown',handleKeyDown);return()=>window.removeEventListener('keydown',handleKeyDown);},[board,gameOver,moveUp,moveDown,moveLeft,moveRight,addRandomTile,checkGameOver,animating]);const resetGame=()=>{setBoard(Array(4).fill().map(()=>Array(4).fill(0)));setScore(0);setGameOver(false);// Add initial tiles after the board is reset\nrequestAnimationFrame(()=>{addRandomTile();addRandomTile();});};return/*#__PURE__*/_jsx(\"div\",{className:\"min-h-screen bg-gray-100 flex flex-col items-center justify-center\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white p-8 rounded-lg shadow-lg\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between items-center mb-4\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"text-4xl font-bold text-gray-800\",children:\"2048\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-right\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"text-2xl font-bold text-gray-700\",children:[\"Score: \",score]}),/*#__PURE__*/_jsx(\"button\",{onClick:resetGame,className:\"mt-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\",children:\"New Game\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"grid grid-cols-4 gap-4 bg-gray-200 p-4 rounded-lg relative\",children:[Array(16).fill().map((_,index)=>/*#__PURE__*/_jsx(\"div\",{className:\"w-20 h-20 bg-gray-300 rounded-lg\"},`grid-${index}`)),board.map((row,i)=>row.map((cell,j)=>cell!==0&&/*#__PURE__*/_jsx(\"div\",{className:`absolute w-20 h-20 flex items-center justify-center rounded-lg text-2xl font-bold\n                    ${getTileColor(cell)}\n                    ${getTextColor(cell)}\n                    transition-all duration-150 ease-in-out\n                    transform-gpu`,style:{top:`${i*6+1}rem`,left:`${j*6+1}rem`},children:cell},`${i}-${j}`)))]}),gameOver&&/*#__PURE__*/_jsxs(\"div\",{className:\"mt-4 text-center\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"text-2xl font-bold text-red-500\",children:\"Game Over!\"}),/*#__PURE__*/_jsx(\"button\",{onClick:resetGame,className:\"mt-2 px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600\",children:\"Try Again\"})]})]})});}export default App;","map":{"version":3,"names":["React","useState","useEffect","useCallback","jsx","_jsx","jsxs","_jsxs","App","board","setBoard","Array","fill","map","score","setScore","gameOver","setGameOver","animating","setAnimating","getTileColor","number","colors","getTextColor","addRandomTile","emptyCells","forEach","row","i","cell","j","push","length","Math","floor","random","prevBoard","newBoard","moveLeft","moved","filteredRow","filter","prev","splice","JSON","stringify","moveRight","unshift","moveUp","column","oldColumn","moveDown","checkGameOver","handleKeyDown","event","result","key","setTimeout","window","addEventListener","removeEventListener","resetGame","requestAnimationFrame","className","children","onClick","_","index","style","top","left"],"sources":["/Users/dbasch/work/entropy-grid/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\n\nfunction App() {\n  const [board, setBoard] = useState(Array(4).fill().map(() => Array(4).fill(0)));\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [animating, setAnimating] = useState(false);\n\n  // Color mapping for different numbers\n  const getTileColor = (number) => {\n    const colors = {\n      0: 'bg-gray-300',\n      2: 'bg-yellow-100',\n      4: 'bg-yellow-200',\n      8: 'bg-orange-200',\n      16: 'bg-orange-300',\n      32: 'bg-red-300',\n      64: 'bg-red-400',\n      128: 'bg-yellow-300',\n      256: 'bg-yellow-400',\n      512: 'bg-yellow-500',\n      1024: 'bg-yellow-600',\n      2048: 'bg-yellow-700',\n    };\n    return colors[number] || 'bg-yellow-800';\n  };\n\n  // Text color mapping for better contrast\n  const getTextColor = (number) => {\n    return number <= 4 ? 'text-gray-800' : 'text-white';\n  };\n\n  // Initialize the game with two random tiles\n  useEffect(() => {\n    addRandomTile();\n    addRandomTile();\n  }, []);\n\n  // Add a random tile (2 or 4) to an empty cell\n  const addRandomTile = useCallback(() => {\n    const emptyCells = [];\n    board.forEach((row, i) => {\n      row.forEach((cell, j) => {\n        if (cell === 0) {\n          emptyCells.push([i, j]);\n        }\n      });\n    });\n\n    if (emptyCells.length > 0) {\n      const [i, j] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n      setBoard(prevBoard => {\n        const newBoard = prevBoard.map(row => [...row]);\n        newBoard[i][j] = Math.random() < 0.9 ? 2 : 4;\n        return newBoard;\n      });\n    }\n  }, [board]);\n\n  const moveLeft = useCallback((board) => {\n    let moved = false;\n    const newBoard = board.map(row => {\n      // Filter out zeros\n      let filteredRow = row.filter(cell => cell !== 0);\n      \n      // Merge adjacent equal numbers\n      for (let i = 0; i < filteredRow.length - 1; i++) {\n        if (filteredRow[i] === filteredRow[i + 1]) {\n          filteredRow[i] *= 2;\n          setScore(prev => prev + filteredRow[i]);\n          filteredRow.splice(i + 1, 1);\n          moved = true;\n        }\n      }\n      \n      // Pad with zeros\n      while (filteredRow.length < 4) {\n        filteredRow.push(0);\n      }\n      \n      // Check if the row has changed\n      if (JSON.stringify(row) !== JSON.stringify(filteredRow)) {\n        moved = true;\n      }\n      \n      return filteredRow;\n    });\n    \n    return { newBoard, moved };\n  }, []);\n\n  const moveRight = useCallback((board) => {\n    let moved = false;\n    const newBoard = board.map(row => {\n      // Filter out zeros\n      let filteredRow = row.filter(cell => cell !== 0);\n      \n      // Merge adjacent equal numbers\n      for (let i = filteredRow.length - 1; i > 0; i--) {\n        if (filteredRow[i] === filteredRow[i - 1]) {\n          filteredRow[i] *= 2;\n          setScore(prev => prev + filteredRow[i]);\n          filteredRow.splice(i - 1, 1);\n          moved = true;\n        }\n      }\n      \n      // Pad with zeros\n      while (filteredRow.length < 4) {\n        filteredRow.unshift(0);\n      }\n      \n      // Check if the row has changed\n      if (JSON.stringify(row) !== JSON.stringify(filteredRow)) {\n        moved = true;\n      }\n      \n      return filteredRow;\n    });\n    \n    return { newBoard, moved };\n  }, []);\n\n  const moveUp = useCallback((board) => {\n    let moved = false;\n    const newBoard = Array(4).fill().map(() => Array(4).fill(0));\n    \n    for (let j = 0; j < 4; j++) {\n      // Get column and filter zeros\n      let column = board.map(row => row[j]).filter(cell => cell !== 0);\n      \n      // Merge adjacent equal numbers\n      for (let i = 0; i < column.length - 1; i++) {\n        if (column[i] === column[i + 1]) {\n          column[i] *= 2;\n          setScore(prev => prev + column[i]);\n          column.splice(i + 1, 1);\n          moved = true;\n        }\n      }\n      \n      // Pad with zeros\n      while (column.length < 4) {\n        column.push(0);\n      }\n      \n      // Update the new board\n      for (let i = 0; i < 4; i++) {\n        newBoard[i][j] = column[i];\n      }\n      \n      // Check if the column has changed\n      const oldColumn = board.map(row => row[j]);\n      if (JSON.stringify(oldColumn) !== JSON.stringify(column)) {\n        moved = true;\n      }\n    }\n    \n    return { newBoard, moved };\n  }, []);\n\n  const moveDown = useCallback((board) => {\n    let moved = false;\n    const newBoard = Array(4).fill().map(() => Array(4).fill(0));\n    \n    for (let j = 0; j < 4; j++) {\n      // Get column and filter zeros\n      let column = board.map(row => row[j]).filter(cell => cell !== 0);\n      \n      // Merge adjacent equal numbers\n      for (let i = column.length - 1; i > 0; i--) {\n        if (column[i] === column[i - 1]) {\n          column[i] *= 2;\n          setScore(prev => prev + column[i]);\n          column.splice(i - 1, 1);\n          moved = true;\n        }\n      }\n      \n      // Pad with zeros\n      while (column.length < 4) {\n        column.unshift(0);\n      }\n      \n      // Update the new board\n      for (let i = 0; i < 4; i++) {\n        newBoard[i][j] = column[i];\n      }\n      \n      // Check if the column has changed\n      const oldColumn = board.map(row => row[j]);\n      if (JSON.stringify(oldColumn) !== JSON.stringify(column)) {\n        moved = true;\n      }\n    }\n    \n    return { newBoard, moved };\n  }, []);\n\n  const checkGameOver = useCallback(() => {\n    // Check for empty cells\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (board[i][j] === 0) return;\n      }\n    }\n\n    // Check for possible merges\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (\n          (i < 3 && board[i][j] === board[i + 1][j]) ||\n          (j < 3 && board[i][j] === board[i][j + 1])\n        ) {\n          return;\n        }\n      }\n    }\n\n    setGameOver(true);\n  }, [board]);\n\n  // Handle keyboard events\n  useEffect(() => {\n    const handleKeyDown = (event) => {\n      if (gameOver || animating) return;\n\n      let result;\n      switch (event.key) {\n        case 'ArrowUp':\n          result = moveUp(board);\n          break;\n        case 'ArrowDown':\n          result = moveDown(board);\n          break;\n        case 'ArrowLeft':\n          result = moveLeft(board);\n          break;\n        case 'ArrowRight':\n          result = moveRight(board);\n          break;\n        default:\n          return;\n      }\n\n      // Only update board and add new tile if there was an actual move\n      if (result.moved) {\n        setAnimating(true);\n        setBoard(result.newBoard);\n        // Add new tile after the animation completes\n        setTimeout(() => {\n          addRandomTile();\n          checkGameOver();\n          setAnimating(false);\n        }, 150); // Match this with the CSS transition duration\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [board, gameOver, moveUp, moveDown, moveLeft, moveRight, addRandomTile, checkGameOver, animating]);\n\n  const resetGame = () => {\n    setBoard(Array(4).fill().map(() => Array(4).fill(0)));\n    setScore(0);\n    setGameOver(false);\n    // Add initial tiles after the board is reset\n    requestAnimationFrame(() => {\n      addRandomTile();\n      addRandomTile();\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 flex flex-col items-center justify-center\">\n      <div className=\"bg-white p-8 rounded-lg shadow-lg\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h1 className=\"text-4xl font-bold text-gray-800\">2048</h1>\n          <div className=\"text-right\">\n            <div className=\"text-2xl font-bold text-gray-700\">Score: {score}</div>\n            <button\n              onClick={resetGame}\n              className=\"mt-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n            >\n              New Game\n            </button>\n          </div>\n        </div>\n        \n        <div className=\"grid grid-cols-4 gap-4 bg-gray-200 p-4 rounded-lg relative\">\n          {/* Background grid */}\n          {Array(16).fill().map((_, index) => (\n            <div\n              key={`grid-${index}`}\n              className=\"w-20 h-20 bg-gray-300 rounded-lg\"\n            />\n          ))}\n          \n          {/* Tiles */}\n          {board.map((row, i) =>\n            row.map((cell, j) => (\n              cell !== 0 && (\n                <div\n                  key={`${i}-${j}`}\n                  className={`absolute w-20 h-20 flex items-center justify-center rounded-lg text-2xl font-bold\n                    ${getTileColor(cell)}\n                    ${getTextColor(cell)}\n                    transition-all duration-150 ease-in-out\n                    transform-gpu`}\n                  style={{\n                    top: `${i * 6 + 1}rem`,\n                    left: `${j * 6 + 1}rem`,\n                  }}\n                >\n                  {cell}\n                </div>\n              )\n            ))\n          )}\n        </div>\n\n        {gameOver && (\n          <div className=\"mt-4 text-center\">\n            <p className=\"text-2xl font-bold text-red-500\">Game Over!</p>\n            <button\n              onClick={resetGame}\n              className=\"mt-2 px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600\"\n            >\n              Try Again\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}