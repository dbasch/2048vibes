{"ast":null,"code":"var _jsxFileName = \"/Users/dbasch/work/entropy-grid/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [board, setBoard] = useState(Array(4).fill().map(() => Array(4).fill(0)));\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [animating, setAnimating] = useState(false);\n\n  // Color mapping for different numbers\n  const getTileColor = number => {\n    const colors = {\n      0: 'bg-gray-300',\n      2: 'bg-yellow-100',\n      4: 'bg-yellow-200',\n      8: 'bg-orange-200',\n      16: 'bg-orange-300',\n      32: 'bg-red-300',\n      64: 'bg-red-400',\n      128: 'bg-yellow-300',\n      256: 'bg-yellow-400',\n      512: 'bg-yellow-500',\n      1024: 'bg-yellow-600',\n      2048: 'bg-yellow-700'\n    };\n    return colors[number] || 'bg-yellow-800';\n  };\n\n  // Text color mapping for better contrast\n  const getTextColor = number => {\n    return number <= 4 ? 'text-gray-800' : 'text-white';\n  };\n\n  // Initialize the game with two random tiles\n  useEffect(() => {\n    addRandomTile();\n    addRandomTile();\n  }, []);\n\n  // Add a random tile (2 or 4) to an empty cell\n  const addRandomTile = useCallback(() => {\n    const emptyCells = [];\n    board.forEach((row, i) => {\n      row.forEach((cell, j) => {\n        if (cell === 0) {\n          emptyCells.push([i, j]);\n        }\n      });\n    });\n    if (emptyCells.length > 0) {\n      const [i, j] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n      setBoard(prevBoard => {\n        const newBoard = prevBoard.map(row => [...row]);\n        newBoard[i][j] = Math.random() < 0.9 ? 2 : 4;\n        return newBoard;\n      });\n    }\n  }, [board]);\n  const moveLeft = useCallback(board => {\n    let moved = false;\n    const newBoard = board.map(row => {\n      // Filter out zeros\n      let filteredRow = row.filter(cell => cell !== 0);\n\n      // Merge adjacent equal numbers\n      for (let i = 0; i < filteredRow.length - 1; i++) {\n        if (filteredRow[i] === filteredRow[i + 1]) {\n          filteredRow[i] *= 2;\n          setScore(prev => prev + filteredRow[i]);\n          filteredRow.splice(i + 1, 1);\n          moved = true;\n        }\n      }\n\n      // Pad with zeros\n      while (filteredRow.length < 4) {\n        filteredRow.push(0);\n      }\n\n      // Check if the row has changed\n      if (JSON.stringify(row) !== JSON.stringify(filteredRow)) {\n        moved = true;\n      }\n      return filteredRow;\n    });\n    return {\n      newBoard,\n      moved\n    };\n  }, []);\n  const moveRight = useCallback(board => {\n    let moved = false;\n    const newBoard = board.map(row => {\n      // Filter out zeros\n      let filteredRow = row.filter(cell => cell !== 0);\n\n      // Merge adjacent equal numbers\n      for (let i = filteredRow.length - 1; i > 0; i--) {\n        if (filteredRow[i] === filteredRow[i - 1]) {\n          filteredRow[i] *= 2;\n          setScore(prev => prev + filteredRow[i]);\n          filteredRow.splice(i - 1, 1);\n          moved = true;\n        }\n      }\n\n      // Pad with zeros\n      while (filteredRow.length < 4) {\n        filteredRow.unshift(0);\n      }\n\n      // Check if the row has changed\n      if (JSON.stringify(row) !== JSON.stringify(filteredRow)) {\n        moved = true;\n      }\n      return filteredRow;\n    });\n    return {\n      newBoard,\n      moved\n    };\n  }, []);\n  const moveUp = useCallback(board => {\n    let moved = false;\n    const newBoard = Array(4).fill().map(() => Array(4).fill(0));\n    for (let j = 0; j < 4; j++) {\n      // Get column and filter zeros\n      let column = board.map(row => row[j]).filter(cell => cell !== 0);\n\n      // Merge adjacent equal numbers\n      for (let i = 0; i < column.length - 1; i++) {\n        if (column[i] === column[i + 1]) {\n          column[i] *= 2;\n          setScore(prev => prev + column[i]);\n          column.splice(i + 1, 1);\n          moved = true;\n        }\n      }\n\n      // Pad with zeros\n      while (column.length < 4) {\n        column.push(0);\n      }\n\n      // Update the new board\n      for (let i = 0; i < 4; i++) {\n        newBoard[i][j] = column[i];\n      }\n\n      // Check if the column has changed\n      const oldColumn = board.map(row => row[j]);\n      if (JSON.stringify(oldColumn) !== JSON.stringify(column)) {\n        moved = true;\n      }\n    }\n    return {\n      newBoard,\n      moved\n    };\n  }, []);\n  const moveDown = useCallback(board => {\n    let moved = false;\n    const newBoard = Array(4).fill().map(() => Array(4).fill(0));\n    for (let j = 0; j < 4; j++) {\n      // Get column and filter zeros\n      let column = board.map(row => row[j]).filter(cell => cell !== 0);\n\n      // Merge adjacent equal numbers\n      for (let i = column.length - 1; i > 0; i--) {\n        if (column[i] === column[i - 1]) {\n          column[i] *= 2;\n          setScore(prev => prev + column[i]);\n          column.splice(i - 1, 1);\n          moved = true;\n        }\n      }\n\n      // Pad with zeros\n      while (column.length < 4) {\n        column.unshift(0);\n      }\n\n      // Update the new board\n      for (let i = 0; i < 4; i++) {\n        newBoard[i][j] = column[i];\n      }\n\n      // Check if the column has changed\n      const oldColumn = board.map(row => row[j]);\n      if (JSON.stringify(oldColumn) !== JSON.stringify(column)) {\n        moved = true;\n      }\n    }\n    return {\n      newBoard,\n      moved\n    };\n  }, []);\n  const checkGameOver = useCallback(() => {\n    // Check for empty cells\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (board[i][j] === 0) return;\n      }\n    }\n\n    // Check for possible merges\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (i < 3 && board[i][j] === board[i + 1][j] || j < 3 && board[i][j] === board[i][j + 1]) {\n          return;\n        }\n      }\n    }\n    setGameOver(true);\n  }, [board]);\n\n  // Handle keyboard events\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if (gameOver || animating) return;\n      let result;\n      switch (event.key) {\n        case 'ArrowUp':\n          result = moveUp(board);\n          break;\n        case 'ArrowDown':\n          result = moveDown(board);\n          break;\n        case 'ArrowLeft':\n          result = moveLeft(board);\n          break;\n        case 'ArrowRight':\n          result = moveRight(board);\n          break;\n        default:\n          return;\n      }\n\n      // Only update board and add new tile if there was an actual move\n      if (result.moved) {\n        setAnimating(true);\n        setBoard(result.newBoard);\n        // Add new tile after the animation completes\n        setTimeout(() => {\n          addRandomTile();\n          checkGameOver();\n          setAnimating(false);\n        }, 150); // Match this with the CSS transition duration\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [board, gameOver, moveUp, moveDown, moveLeft, moveRight, addRandomTile, checkGameOver, animating]);\n  const resetGame = () => {\n    setBoard(Array(4).fill().map(() => Array(4).fill(0)));\n    setScore(0);\n    setGameOver(false);\n    // Add initial tiles after the board is reset\n    requestAnimationFrame(() => {\n      addRandomTile();\n      addRandomTile();\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-100 flex flex-col items-center justify-center\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white p-8 rounded-lg shadow-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between items-center mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-4xl font-bold text-gray-800\",\n          children: \"2048\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-right\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-2xl font-bold text-gray-700\",\n            children: [\"Score: \", score]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: resetGame,\n            className: \"mt-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\",\n            children: \"New Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-4 gap-4 bg-gray-200 p-4 rounded-lg relative\",\n        children: [Array(16).fill().map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-20 h-20 bg-gray-300 rounded-lg\"\n        }, `grid-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 13\n        }, this)), board.map((row, i) => row.map((cell, j) => cell !== 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `absolute w-20 h-20 flex items-center justify-center rounded-lg text-2xl font-bold\n                    ${getTileColor(cell)}\n                    ${getTextColor(cell)}\n                    transition-all duration-150 ease-in-out\n                    transform-gpu`,\n          style: {\n            top: `${i * 6 + 1}rem`,\n            left: `${j * 6 + 1}rem`\n          },\n          children: cell\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 17\n        }, this)))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4 text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-2xl font-bold text-red-500\",\n          children: \"Game Over!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          className: \"mt-2 px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600\",\n          children: \"Try Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 275,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Arx77R3b71elM2p5m0bldJQYG20=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","jsxDEV","_jsxDEV","App","_s","board","setBoard","Array","fill","map","score","setScore","gameOver","setGameOver","animating","setAnimating","getTileColor","number","colors","getTextColor","addRandomTile","emptyCells","forEach","row","i","cell","j","push","length","Math","floor","random","prevBoard","newBoard","moveLeft","moved","filteredRow","filter","prev","splice","JSON","stringify","moveRight","unshift","moveUp","column","oldColumn","moveDown","checkGameOver","handleKeyDown","event","result","key","setTimeout","window","addEventListener","removeEventListener","resetGame","requestAnimationFrame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_","index","style","top","left","_c","$RefreshReg$"],"sources":["/Users/dbasch/work/entropy-grid/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\n\nfunction App() {\n  const [board, setBoard] = useState(Array(4).fill().map(() => Array(4).fill(0)));\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [animating, setAnimating] = useState(false);\n\n  // Color mapping for different numbers\n  const getTileColor = (number) => {\n    const colors = {\n      0: 'bg-gray-300',\n      2: 'bg-yellow-100',\n      4: 'bg-yellow-200',\n      8: 'bg-orange-200',\n      16: 'bg-orange-300',\n      32: 'bg-red-300',\n      64: 'bg-red-400',\n      128: 'bg-yellow-300',\n      256: 'bg-yellow-400',\n      512: 'bg-yellow-500',\n      1024: 'bg-yellow-600',\n      2048: 'bg-yellow-700',\n    };\n    return colors[number] || 'bg-yellow-800';\n  };\n\n  // Text color mapping for better contrast\n  const getTextColor = (number) => {\n    return number <= 4 ? 'text-gray-800' : 'text-white';\n  };\n\n  // Initialize the game with two random tiles\n  useEffect(() => {\n    addRandomTile();\n    addRandomTile();\n  }, []);\n\n  // Add a random tile (2 or 4) to an empty cell\n  const addRandomTile = useCallback(() => {\n    const emptyCells = [];\n    board.forEach((row, i) => {\n      row.forEach((cell, j) => {\n        if (cell === 0) {\n          emptyCells.push([i, j]);\n        }\n      });\n    });\n\n    if (emptyCells.length > 0) {\n      const [i, j] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n      setBoard(prevBoard => {\n        const newBoard = prevBoard.map(row => [...row]);\n        newBoard[i][j] = Math.random() < 0.9 ? 2 : 4;\n        return newBoard;\n      });\n    }\n  }, [board]);\n\n  const moveLeft = useCallback((board) => {\n    let moved = false;\n    const newBoard = board.map(row => {\n      // Filter out zeros\n      let filteredRow = row.filter(cell => cell !== 0);\n      \n      // Merge adjacent equal numbers\n      for (let i = 0; i < filteredRow.length - 1; i++) {\n        if (filteredRow[i] === filteredRow[i + 1]) {\n          filteredRow[i] *= 2;\n          setScore(prev => prev + filteredRow[i]);\n          filteredRow.splice(i + 1, 1);\n          moved = true;\n        }\n      }\n      \n      // Pad with zeros\n      while (filteredRow.length < 4) {\n        filteredRow.push(0);\n      }\n      \n      // Check if the row has changed\n      if (JSON.stringify(row) !== JSON.stringify(filteredRow)) {\n        moved = true;\n      }\n      \n      return filteredRow;\n    });\n    \n    return { newBoard, moved };\n  }, []);\n\n  const moveRight = useCallback((board) => {\n    let moved = false;\n    const newBoard = board.map(row => {\n      // Filter out zeros\n      let filteredRow = row.filter(cell => cell !== 0);\n      \n      // Merge adjacent equal numbers\n      for (let i = filteredRow.length - 1; i > 0; i--) {\n        if (filteredRow[i] === filteredRow[i - 1]) {\n          filteredRow[i] *= 2;\n          setScore(prev => prev + filteredRow[i]);\n          filteredRow.splice(i - 1, 1);\n          moved = true;\n        }\n      }\n      \n      // Pad with zeros\n      while (filteredRow.length < 4) {\n        filteredRow.unshift(0);\n      }\n      \n      // Check if the row has changed\n      if (JSON.stringify(row) !== JSON.stringify(filteredRow)) {\n        moved = true;\n      }\n      \n      return filteredRow;\n    });\n    \n    return { newBoard, moved };\n  }, []);\n\n  const moveUp = useCallback((board) => {\n    let moved = false;\n    const newBoard = Array(4).fill().map(() => Array(4).fill(0));\n    \n    for (let j = 0; j < 4; j++) {\n      // Get column and filter zeros\n      let column = board.map(row => row[j]).filter(cell => cell !== 0);\n      \n      // Merge adjacent equal numbers\n      for (let i = 0; i < column.length - 1; i++) {\n        if (column[i] === column[i + 1]) {\n          column[i] *= 2;\n          setScore(prev => prev + column[i]);\n          column.splice(i + 1, 1);\n          moved = true;\n        }\n      }\n      \n      // Pad with zeros\n      while (column.length < 4) {\n        column.push(0);\n      }\n      \n      // Update the new board\n      for (let i = 0; i < 4; i++) {\n        newBoard[i][j] = column[i];\n      }\n      \n      // Check if the column has changed\n      const oldColumn = board.map(row => row[j]);\n      if (JSON.stringify(oldColumn) !== JSON.stringify(column)) {\n        moved = true;\n      }\n    }\n    \n    return { newBoard, moved };\n  }, []);\n\n  const moveDown = useCallback((board) => {\n    let moved = false;\n    const newBoard = Array(4).fill().map(() => Array(4).fill(0));\n    \n    for (let j = 0; j < 4; j++) {\n      // Get column and filter zeros\n      let column = board.map(row => row[j]).filter(cell => cell !== 0);\n      \n      // Merge adjacent equal numbers\n      for (let i = column.length - 1; i > 0; i--) {\n        if (column[i] === column[i - 1]) {\n          column[i] *= 2;\n          setScore(prev => prev + column[i]);\n          column.splice(i - 1, 1);\n          moved = true;\n        }\n      }\n      \n      // Pad with zeros\n      while (column.length < 4) {\n        column.unshift(0);\n      }\n      \n      // Update the new board\n      for (let i = 0; i < 4; i++) {\n        newBoard[i][j] = column[i];\n      }\n      \n      // Check if the column has changed\n      const oldColumn = board.map(row => row[j]);\n      if (JSON.stringify(oldColumn) !== JSON.stringify(column)) {\n        moved = true;\n      }\n    }\n    \n    return { newBoard, moved };\n  }, []);\n\n  const checkGameOver = useCallback(() => {\n    // Check for empty cells\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (board[i][j] === 0) return;\n      }\n    }\n\n    // Check for possible merges\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (\n          (i < 3 && board[i][j] === board[i + 1][j]) ||\n          (j < 3 && board[i][j] === board[i][j + 1])\n        ) {\n          return;\n        }\n      }\n    }\n\n    setGameOver(true);\n  }, [board]);\n\n  // Handle keyboard events\n  useEffect(() => {\n    const handleKeyDown = (event) => {\n      if (gameOver || animating) return;\n\n      let result;\n      switch (event.key) {\n        case 'ArrowUp':\n          result = moveUp(board);\n          break;\n        case 'ArrowDown':\n          result = moveDown(board);\n          break;\n        case 'ArrowLeft':\n          result = moveLeft(board);\n          break;\n        case 'ArrowRight':\n          result = moveRight(board);\n          break;\n        default:\n          return;\n      }\n\n      // Only update board and add new tile if there was an actual move\n      if (result.moved) {\n        setAnimating(true);\n        setBoard(result.newBoard);\n        // Add new tile after the animation completes\n        setTimeout(() => {\n          addRandomTile();\n          checkGameOver();\n          setAnimating(false);\n        }, 150); // Match this with the CSS transition duration\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [board, gameOver, moveUp, moveDown, moveLeft, moveRight, addRandomTile, checkGameOver, animating]);\n\n  const resetGame = () => {\n    setBoard(Array(4).fill().map(() => Array(4).fill(0)));\n    setScore(0);\n    setGameOver(false);\n    // Add initial tiles after the board is reset\n    requestAnimationFrame(() => {\n      addRandomTile();\n      addRandomTile();\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 flex flex-col items-center justify-center\">\n      <div className=\"bg-white p-8 rounded-lg shadow-lg\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h1 className=\"text-4xl font-bold text-gray-800\">2048</h1>\n          <div className=\"text-right\">\n            <div className=\"text-2xl font-bold text-gray-700\">Score: {score}</div>\n            <button\n              onClick={resetGame}\n              className=\"mt-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n            >\n              New Game\n            </button>\n          </div>\n        </div>\n        \n        <div className=\"grid grid-cols-4 gap-4 bg-gray-200 p-4 rounded-lg relative\">\n          {/* Background grid */}\n          {Array(16).fill().map((_, index) => (\n            <div\n              key={`grid-${index}`}\n              className=\"w-20 h-20 bg-gray-300 rounded-lg\"\n            />\n          ))}\n          \n          {/* Tiles */}\n          {board.map((row, i) =>\n            row.map((cell, j) => (\n              cell !== 0 && (\n                <div\n                  key={`${i}-${j}`}\n                  className={`absolute w-20 h-20 flex items-center justify-center rounded-lg text-2xl font-bold\n                    ${getTileColor(cell)}\n                    ${getTextColor(cell)}\n                    transition-all duration-150 ease-in-out\n                    transform-gpu`}\n                  style={{\n                    top: `${i * 6 + 1}rem`,\n                    left: `${j * 6 + 1}rem`,\n                  }}\n                >\n                  {cell}\n                </div>\n              )\n            ))\n          )}\n        </div>\n\n        {gameOver && (\n          <div className=\"mt-4 text-center\">\n            <p className=\"text-2xl font-bold text-red-500\">Game Over!</p>\n            <button\n              onClick={resetGame}\n              className=\"mt-2 px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600\"\n            >\n              Try Again\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}